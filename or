以下に、1万点程度のデータ（各点が緯度・経度・需要量を持つ）に対して容量制約付きのクラスタリングを行う場合に考えられる手法やアルゴリズム、それぞれの比較検討、および推奨されるアプローチについて詳細にまとめます。

前提と課題
データ数: 約1万点
各点情報: (緯度、経度、需要量)
目的: 地理的に近接したグループに分割しつつ、各クラスタがあらかじめ定めた容量（もしくは上限需要量）を超えないようにしたい。
ここでの「容量制約付きクラスタリング」とは、単純なk-meansのような「重心からの距離最小化」に加え、各クラスタが持つ「需要量の合計が所定の容量を超えない」制約を考慮する問題であり、これは一般に「容量制約付きクラスタリング（Capacitated Clustering Problem）」や「容量制約付き施設配置問題（Capacitated Facility Location Problem, CFLP）」、さらには「割当問題」や「Capacitated k-means」などと呼ばれる分野に相当します。

考えられる手法やアプローチ
1. 数理最適化問題として定式化
代表例: Capacitated p-median問題、Capacitated Facility Location問題
手法: 数理モデル(MIP: Mixed Integer Programming)を定式化し、GurobiやCPLEXなどの商用ソルバを用いて解く。
利点:
厳密解またはギャランティのある近似解が得られる。
モデル変更（例：容量上限の変更、クラスタ数固定など）が理論的に容易。
欠点:
1万点規模で厳密なMIPを解くには計算リソースや時間が非常に大きくなる可能性が高い。
問題サイズを削減するための前処理やヒューリスティックが必要になる。
2. ヒューリスティック手法・メタヒューリスティック手法
代表例:
容量制約付きk-means (Capacitated k-means)
遺伝的アルゴリズム(GA)、メタヒューリスティクス(シミュレーテッド・アニーリング、タブーサーチ、粒子群最適化など)
クラスタファースト・ルーティングセカンド型ヒューリスティック（元々VRPで使われるが、需要制約を考えるための近似的な前段階として）
利点:
非常に大規模な問題にも対応しやすい。
必ずしも厳密解を求めずとも、十分に良い近似解や実用的な解が得られる。
パラメータや初期解の工夫次第で品質改善が可能。
欠点:
厳密な最適性保証は困難。
パラメータチューニングや実験的試行が必要。
3. 段階的・階層的アプローチ
アプローチ例:
まずは地理的な近接性のみを用いて、標準的なクラスタリング（k-meansやDBSCANなど）で細かいグループを作成する。
作成した多くの小クラスタを単位として需要制約を満たしつつ、これら小クラスタをまとめていく（もしくはスプリットする）二段階処理。
利点:
大規模問題を「細分化 → 統合」することで計算負荷を軽減。
初期段階で近接性による自然な地理的クラスタを形成できるため、後工程の制約付き調整が容易化。
欠点:
クラスタリング結果が初期段階の手法に強く依存する。
厳密最適解にはならないが、妥当な実用解を得やすい。
4. 代表的な問題変形：VRP(車両経路問題)由来の手法
需要を「配送需要」とみなし、各クラスタを「1台の車両が担当する顧客セット」と考えると、CVRP（Capacitated Vehicle Routing Problem）のクラスタリング段階に相当する。
VRP領域では多数のメタヒューリスティックや近似アルゴリズムが蓄積されており、それらを参考にすることも有効。
例：クラスターファースト・ルートセカンド手法
最初に地理的・需要的に妥当なクラスタを作るヒューリスティック手法（Sweep Algorithmなど）を用い、その後詳細調整を行う。
規模に応じた手法選択
1万点という大規模問題では、以下が考慮すべき現実的な選択肢となります。

厳密解へのこだわりがなければ、メタヒューリスティックを活用

Capacitated k-meansを遺伝的アルゴリズムやタブーサーチで近似的に最適化。
プログラミングフレームワーク（Python + OR-Toolsなど）を活用。
問題を段階的に分解

まずは単純な地理的クラスタリング(k-meansまたはk-means++で初期分割)を行い、
その後、需要超過となるクラスタを二分割・再割当するローカルサーチ手法で調整。
これにより、計算負荷を制御しつつ、ある程度バランスの取れた解が得られやすい。

VRP手法やCFLP用の既存実装

OR-Tools（Google提供）などにある手法で、割当問題（CFLP）の近似解法を参考にする。
設定次第で適用可能な場合があるため、ツールや既存ソルバの活用も選択肢に。
おすすめの方向性
計算資源や時間が豊富で、モデリングに慣れているのであれば、Capacitated Facility Location問題として定式化し、MIPソルバで解くことを試みるのも良い。しかし1万点はかなり大規模なので、前処理として点群を一旦グルーピングし、中間的なメタノード（「超顧客」）に落とし込むなどの工夫が必要。
より現実的な手段としては、メタヒューリスティックを用いた容量制約付きクラスタリング手法を用いることを強く推奨。特に遺伝的アルゴリズムやタブーサーチ、シミュレーテッド・アニーリングは実装が比較的容易で、拡張性も高く、1万点クラスでもハードウェアを適宜活用して数時間～1日程度の計算で「使える解」を得やすい。
簡易なアプローチとして、まずは地理的単純クラスタリング + ローカルサーチによる容量調整を行う二段階法も実務的に使われることが多い。
まとめ
1万点規模の容量制約付きクラスタリングでは、厳密な最適化は計算コストが高騰するため、メタヒューリスティックを用いたヒューリスティック解法や、段階的なアプローチが現実的かつ有用な選択肢となります。特に、Capacitated k-meansのようなモデルに対し、遺伝的アルゴリズムやタブーサーチなどで近似解を求めるアプローチや、まず地理的に素朴なクラスタを作成し、それを容量制約で調整する2段階手法が妥当なスタートポイントです。

from ortools.constraint_solver import pywrapcp
from ortools.constraint_solver import routing_enums_pb2

def create_data_model():
    """データモデルを作成します。"""
    data = {}
    # 距離（時間）行列
    data['time_matrix'] = [
        [0, 9, 6, 8, 7],
        [9, 0, 5, 6, 6],
        [6, 5, 0, 4, 3],
        [8, 6, 4, 0, 2],
        [7, 6, 3, 2, 0],
    ]
    # 各ノードの需要量
    data['demands'] = [0, 1, 1, 2, 4]  # デポは需要量0
    # 各ノードのサービス時間
    data['service_times'] = [0, 2, 2, 3, 5]  # デポはサービス時間0
    # 各ノードの時間窓（開始時間、終了時間）
    data['time_windows'] = [
        (0, 100),  # デポ
        (10, 20),
        (10, 20),
        (0, 15),
        (5, 25),
    ]
    # 車両の数
    data['num_vehicles'] = 2
    # 車両の容量
    data['vehicle_capacities'] = [5, 5]
    # 車両の時間窓（開始時間、終了時間）
    data['vehicle_time_windows'] = [
        (0, 30),
        (0, 30),
    ]
    # デポのインデックス
    data['depot'] = 0
    return data

def print_solution(data, manager, routing, solution):
    """解を出力します。"""
    total_distance = 0
    total_load = 0
    total_time = 0
    time_dimension = routing.GetDimensionOrDie('Time')  # 修正: time_dimensionを関数内で取得
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = '車両 {} のルート:\n'.format(vehicle_id)
        route_distance = 0
        route_load = 0
        route_time = 0
        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            route_load += data['demands'][node_index]
            time_var = time_dimension.CumulVar(index)
            plan_output += ' {0} 時間({1},{2}) ->'.format(node_index, solution.Min(time_var), solution.Max(time_var))
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            if not routing.IsEnd(index):
                route_distance += routing.GetArcCostForVehicle(previous_index, index, vehicle_id)
        time_var = time_dimension.CumulVar(index)
        plan_output += ' {0} 時間({1},{2})\n'.format(manager.IndexToNode(index), solution.Min(time_var), solution.Max(time_var))
        plan_output += '積載量: {}\n'.format(route_load)
        plan_output += '距離: {}\n'.format(route_distance)
        plan_output += '時間: {}\n'.format(solution.Min(time_var))
        print(plan_output)
        total_distance += route_distance
        total_load += route_load
        total_time += solution.Min(time_var)
    print('総距離: {}'.format(total_distance))
    print('総積載量: {}'.format(total_load))
    print('総時間: {}'.format(total_time))

def main():
    """メイン関数"""
    # データを作成
    data = create_data_model()

    # マネージャーとルーティングモデルを作成
    manager = pywrapcp.RoutingIndexManager(len(data['time_matrix']),
                                           data['num_vehicles'], data['depot'])
    routing = pywrapcp.RoutingModel(manager)

    # 時間コストの計算
    def time_callback(from_index, to_index):
        """移動時間を計算します。"""
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        travel_time = data['time_matrix'][from_node][to_node]
        service_time = data['service_times'][from_node]
        return travel_time + service_time

    transit_callback_index = routing.RegisterTransitCallback(time_callback)

    # コスト（時間）を設定
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # 容量制約の設定
    def demand_callback(from_index):
        """需要を返します。"""
        from_node = manager.IndexToNode(from_index)
        return data['demands'][from_node]

    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index,
        0,  # 余裕
        data['vehicle_capacities'],  # 各車両の容量
        True,  # 蓄積可能
        'Capacity'
    )

    # 時間窓制約の設定
    routing.AddDimension(
        transit_callback_index,
        30,  # 待機可能時間
        30,  # 最大累積時間
        False,  # 時間は累積可能
        'Time'
    )
    time_dimension = routing.GetDimensionOrDie('Time')

    # 各ノードの時間窓を追加
    for node_index in range(len(data['time_windows'])):
        index = manager.NodeToIndex(node_index)
        time_dimension.CumulVar(index).SetRange(data['time_windows'][node_index][0],
                                                data['time_windows'][node_index][1])

    # 各車両の開始時間と終了時間を設定
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        time_dimension.CumulVar(index).SetRange(data['vehicle_time_windows'][vehicle_id][0],
                                                data['vehicle_time_windows'][vehicle_id][1])

    # サービス時間を考慮した待機時間を設定
    for i in range(routing.Size()):
        time_dimension.SetCumulVarSoftUpperBound(i, data['time_windows'][manager.IndexToNode(i)][1], 1000)

    # サーチパラメータの設定
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)  # 修正箇所

    # 解を求める
    solution = routing.SolveWithParameters(search_parameters)

    # 結果を出力
    if solution:
        print_solution(data, manager, routing, solution)
    else:
        print('解が見つかりませんでした。')

if __name__ == '__main__':
    main()


from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp

def create_data_model():
    """データを準備します"""
    data = {}
    # 距離行列（簡易なサンプル）
    data['distance_matrix'] = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0],
    ]
    # サービス時間
    data['service_time'] = [0, 5, 5, 5]

    # 各ノードの時間ウィンドウ(開始, 終了)
    # ここでは余裕を持たせることで解が得やすくする
    data['time_windows'] = [
        (0, 600),   # デポ
        (0, 600),    # 顧客1
        (0, 600),    # 顧客2
        (0, 600),    # 顧客3
    ]

    # 車両数
    data['num_vehicles'] = 2
    # デポのインデックス
    data['depot'] = 0

    # 車両ごとの勤務開始・終了時間をゆるく設定
    # 両車両とも0~100で稼働可能
    data['vehicle_time_windows'] = [
        (0, 600),    # 車両0
        (0, 600),    # 車両1
    ]

    return data

def main():
    data = create_data_model()

    # ルーティングインデックスマネージャー生成
    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),
                                           data['num_vehicles'],
                                           data['depot'])

    routing = pywrapcp.RoutingModel(manager)

    # 距離コールバック
    def distance_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # 時間コールバック
    def time_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        # 移動時間 = 距離 + サービス時間（from_nodeのサービス時間を移動に加算）
        return data['distance_matrix'][from_node][to_node] + data['service_time'][from_node]

    time_callback_index = routing.RegisterTransitCallback(time_callback)

    # 時間次元追加
    horizon = 1000
    routing.AddDimension(
        time_callback_index,
        30,          # スラック
        horizon,     # 最大時間
        True,        # 各ルート開始時に時間0で固定
        'Time')

    time_dimension = routing.GetDimensionOrDie('Time')

    # 車両ごとの開始・終了時間設定
    for vehicle_id, (start, end) in enumerate(data['vehicle_time_windows']):
        start_index = routing.Start(vehicle_id)
        end_index = routing.End(vehicle_id)
        time_dimension.CumulVar(start_index).SetRange(start, start)
        #time_dimension.CumulVar(end_index).SetRange(0, end)

    for vehicle_id, (start, end) in enumerate(data['vehicle_time_windows']):
        routing.SetFixedCostOfVehicle(vehicle_id*1000, vehicle_id)


    # 検索パラメータ
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)
    search_parameters.local_search_metaheuristic = (
        routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH
    )
    search_parameters.time_limit.seconds=10

    # ソルバー実行
    solution = routing.SolveWithParameters(search_parameters)

    if solution:
        total_distance = 0
        for vehicle_id in range(data['num_vehicles']):
            index = routing.Start(vehicle_id)
            plan_output = f'ルート for 車両 {vehicle_id}:\n'
            route_distance = 0
            while not routing.IsEnd(index):
                time_val = solution.Value(time_dimension.CumulVar(index))
                node_index = manager.IndexToNode(index)
                plan_output += f' {node_index} Time({time_val}) ->'
                previous_index = index
                index = solution.Value(routing.NextVar(index))
                route_distance += routing.GetArcCostForVehicle(previous_index, index, vehicle_id)
            time_val = solution.Value(time_dimension.CumulVar(index))
            node_index = manager.IndexToNode(index)
            plan_output += f' {node_index} Time({time_val})\n'
            plan_output += f' 距離: {route_distance}\n'
            print(plan_output)
            total_distance += route_distance

        print(f'総距離: {total_distance}')
    else:
        print('解なし')

if __name__ == '__main__':
    main()
