from ortools.constraint_solver import pywrapcp
from ortools.constraint_solver import routing_enums_pb2

def create_data_model():
    """データモデルを作成します。"""
    data = {}
    # 距離（時間）行列
    data['time_matrix'] = [
        [0, 9, 6, 8, 7],
        [9, 0, 5, 6, 6],
        [6, 5, 0, 4, 3],
        [8, 6, 4, 0, 2],
        [7, 6, 3, 2, 0],
    ]
    # 各ノードの需要量
    data['demands'] = [0, 1, 1, 2, 4]  # デポは需要量0
    # 各ノードのサービス時間
    data['service_times'] = [0, 2, 2, 3, 5]  # デポはサービス時間0
    # デポでの待機時間（デポに戻った際の待機時間）
    data['depot_wait_time'] = 5  # 例として5単位時間待機
    # 各ノードの時間窓（開始時間、終了時間）
    data['time_windows'] = [
        (0, 100),  # デポ
        (10, 20),
        (10, 20),
        (0, 15),
        (5, 25),
    ]
    # 車両の数
    data['num_vehicles'] = 2
    # 車両ごとの最大トリップ数
    data['max_trips_per_vehicle'] = 3  # 例として最大3トリップ
    # 仮想的な車両の数（車両数 × 最大トリップ数）
    data['total_vehicles'] = data['num_vehicles'] * data['max_trips_per_vehicle']
    # 車両の容量
    data['vehicle_capacities'] = [5] * data['total_vehicles']
    # 車両の時間制約（各サブ車両は個別に設定）
    data['vehicle_time_windows'] = [(0, 50)] * data['total_vehicles']
    # デポのインデックス
    data['depot'] = 0
    return data

def print_solution(data, manager, routing, solution, vehicle_trips):
    """解を出力します。"""
    total_load = 0
    total_time = 0
    time_dimension = routing.GetDimensionOrDie('Time')
    capacity_dimension = routing.GetDimensionOrDie('Capacity')

    vehicle_trips_time = [0] * data['num_vehicles']

    for vehicle_id in range(data['total_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = 'サブ車両 {} のルート:\n'.format(vehicle_id)
        route_load = 0
        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            load_var = capacity_dimension.CumulVar(index)
            time_var = time_dimension.CumulVar(index)
            plan_output += ' {0} Load({1}) Time({2},{3}) ->'.format(
                node_index,
                solution.Value(load_var),
                solution.Min(time_var),
                solution.Max(time_var))
            previous_index = index
            index = solution.Value(routing.NextVar(index))
        node_index = manager.IndexToNode(index)
        load_var = capacity_dimension.CumulVar(index)
        time_var = time_dimension.CumulVar(index)
        plan_output += ' {0} Load({1}) Time({2},{3})\n'.format(
            node_index,
            solution.Value(load_var),
            solution.Min(time_var),
            solution.Max(time_var))
        print(plan_output)

        # 同一の物理車両の時間を合計
        physical_vehicle_id = vehicle_id // data['max_trips_per_vehicle']
        trip_time = solution.Min(time_var) - data['vehicle_time_windows'][vehicle_id][0]
        vehicle_trips_time[physical_vehicle_id] += trip_time

    # 各物理車両の総運行時間を出力
    for i in range(data['num_vehicles']):
        print('車両 {} の総運行時間: {}'.format(i, vehicle_trips_time[i]))

def main():
    """メイン関数"""
    # データを作成
    data = create_data_model()

    # マネージャーとルーティングモデルを作成
    manager = pywrapcp.RoutingIndexManager(len(data['time_matrix']),
                                           data['total_vehicles'], data['depot'])
    routing = pywrapcp.RoutingModel(manager)

    # 時間コストの計算
    def time_callback(from_index, to_index):
        """移動時間を計算します。"""
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        travel_time = data['time_matrix'][from_node][to_node]
        service_time = data['service_times'][from_node]
        # デポでの待機時間を追加
        if from_node == data['depot'] and to_node != data['depot']:
            return travel_time + service_time + data['depot_wait_time']
        else:
            return travel_time + service_time

    transit_callback_index = routing.RegisterTransitCallback(time_callback)

    # コスト（時間）を設定
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # 容量制約の設定
    def demand_callback(from_index):
        """需要を返します。"""
        from_node = manager.IndexToNode(from_index)
        return data['demands'][from_node]

    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index,
        0,  # 余裕
        data['vehicle_capacities'],  # 各車両の容量
        True,  # 蓄積可能
        'Capacity'
    )

    # 時間窓制約の設定
    routing.AddDimension(
        transit_callback_index,
        100,  # 待機可能時間
        100,  # 最大累積時間
        False,  # 時間は累積可能
        'Time'
    )
    time_dimension = routing.GetDimensionOrDie('Time')

    # 各ノードの時間窓を追加
    for node_index in range(len(data['time_windows'])):
        index = manager.NodeToIndex(node_index)
        time_dimension.CumulVar(index).SetRange(data['time_windows'][node_index][0],
                                                data['time_windows'][node_index][1])

    # 各車両の開始時間と終了時間を設定
    for vehicle_id in range(data['total_vehicles']):
        index = routing.Start(vehicle_id)
        time_dimension.CumulVar(index).SetRange(data['vehicle_time_windows'][vehicle_id][0],
                                                data['vehicle_time_windows'][vehicle_id][1])

    # 同一の物理車両に属するサブ車両の時間を連動させる
    # 各物理車両のサブ車両の時間を合計し、車両の総運行時間制限を設定
    total_time_per_vehicle = 50  # 例として各物理車両の総運行時間を50とする
    for i in range(data['num_vehicles']):
        # サブ車両のインデックス
        sub_vehicle_indices = [j for j in range(i * data['max_trips_per_vehicle'], (i + 1) * data['max_trips_per_vehicle'])]
        # 各サブ車両の終了時間を取得
        end_times = [time_dimension.CumulVar(routing.End(j)) for j in sub_vehicle_indices]
        # 合計時間を計算
        total_time = routing.solver().Sum(end_times)
        # 総運行時間制限を設定
        routing.solver().Add(total_time <= total_time_per_vehicle)

    # サーチパラメータの設定
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)
    search_parameters.local_search_metaheuristic = (
        routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)
    search_parameters.time_limit.seconds = 30  # 探索時間の制限

    # 解を求める
    solution = routing.SolveWithParameters(search_parameters)

    # 結果を出力
    if solution:
        vehicle_trips = data['max_trips_per_vehicle']
        print_solution(data, manager, routing, solution, vehicle_trips)
    else:
        print('解が見つかりませんでした。')

if __name__ == '__main__':
    main()


def add_virtual_depots(distance_matrix_d0, n_virtual_depots):
    num_customers = len(distance_matrix_d0) - 1
    num_total_nodes = 1 + n_virtual_depots + num_customers
    distance_matrix_with_virtual = [[0]*num_total_nodes for _ in range(num_total_nodes)]
    d0_to_customers = distance_matrix_d0[0][1:]
    for i in range(n_virtual_depots + 1):
        for j in range(n_virtual_depots + 1):
            distance_matrix_with_virtual[i][j] = 0
    for depot_idx in range(n_virtual_depots + 1):
        for customer_idx, dist in enumerate(d0_to_customers):
            distance_matrix_with_virtual[depot_idx][n_virtual_depots + 1 + customer_idx] = dist
    for customer_idx in range(num_customers):
        dist = distance_matrix_d0[customer_idx + 1][0]
        for depot_idx in range(n_virtual_depots + 1):
            distance_matrix_with_virtual[n_virtual_depots + 1 + customer_idx][depot_idx] = dist
    for i in range(num_customers):
        for j in range(num_customers):
            distance_matrix_with_virtual[n_virtual_depots + 1 + i][n_virtual_depots + 1 + j] = distance_matrix_d0[i + 1][j + 1]
    return distance_matrix_with_virtual

# 関数の使用例
distance_matrix_with_virtual = add_virtual_depots(distance_matrix_d0, 3)
for row in distance_matrix_with_virtual:
    print(row)
